// pancake-sort 1
// Initialize variables
0 n! 0 i! 0 j! 0 k! 0 t! 0 m!

// Helper function to flip subarray
:F                      // F for Flip
    i!                 // start index
    j!                 // end index
    /U (              // unlimited loop
        i j < /W      // while start < end
        i " k!        // save i
        j i!          // i = j
        k j!          // j = k
        W            // swap elements
        i 1 + i!      // i++
        j 1 - j!      // j--
    )
;

// Find max element index in range
:M                      // M for Max index
    i!                 // start index
    j!                 // end index
    i m!              // max_idx = start
    i 1 + k!          // k = i + 1
    /U (              // unlimited loop
        k j <= /W     // while k <= end
        a k ? a m ? > ( // if current > max
            k m!      // update max_idx
        ) '
        k 1 + k!      // k++
    )
;

// Main pancake sort implementation
:P                      // P for Pancake sort
    a /S n!            // get array size
    n 1 < (            // if size < 1
        `Array too small` /N
        /T             // exit
    )
    
    n 1 - j!          // current size = n-1
    /U (              // unlimited loop
        j 0 > /W      // while size > 0
        
        // Find max element in current subarray
        0 j M m!      // find max in range [0,j]
        
        m j = /F = (  // if max not at end
            // Flip to move max to beginning
            m 0 > (    // if max not at start
                0 m F  // flip [0,max]
            )
            0 j F     // flip [0,j]
        )
        
        j 1 - j!      // reduce size
    )
;

// Print array helper
:D                      // D for Display
    `Array:` /N
    a /S (             // loop array size times
        a /i ? .       // print number
        ` `           // space
    ) /N
;

// Helper function to swap elements
:W                      // W for sWap
    a i ? t!           // temp = a[i]
    a j ? a i ?!       // a[i] = a[j]
    t a j ?!           // a[j] = temp
;

// Verify sort helper
:V                      // V for Verify
    `Verifying sort...` /N
    a /S 1 - (         // loop through array
        /i i!          // current position
        i 1 + j!       // next position
        a i ? a j ? > ( // if out of order
            `Sort failed at position ` i . /N
            /T         // exit
        ) ' '
    )
    `Sort verified successfully` /N
;

// Test function with multiple cases
:T                      // T for Test
    // Test 1: Original test case
    [ 5 3 1 4 2 ] a!
    `Test 1 - Original case` /N
    `Before:` /N
    D
    P
    `After:` /N
    D
    V /N

    // Test 2: Already sorted
    [ 1 2 3 4 5 ] a!
    `Test 2 - Already sorted` /N
    `Before:` /N
    D
    P
    `After:` /N
    D
    V /N

    // Test 3: Reversed
    [ 5 4 3 2 1 ] a!
    `Test 3 - Reversed` /N
    `Before:` /N
    D
    P
    `After:` /N
    D
    V /N

    // Test 4: With duplicates
    [ 4 2 4 1 3 ] a!
    `Test 4 - With duplicates` /N
    `Before:` /N
    D
    P
    `After:` /N
    D
    V /N

    // Test 5: Larger array
    [ 9 8 7 6 5 4 3 2 1 ] a!
    `Test 5 - Larger array` /N
    `Before:` /N
    D
    P
    `After:` /N
    D
    V /N
;

// Performance analysis
:Y                      // Y for analYsis
    0 k!               // initialize flip counter
    [ 5 4 3 2 1 ] a!
    `Performance Analysis` /N
    `Before:` /N
    D
    
    // Modified sort with counting
    n 1 - j!
    /U (
        j 0 > /W
        0 j M m!
        m j = /F = (
            m 0 > (
                0 m F
                k 1 + k!  // count flip
            )
            0 j F
            k 1 + k!    // count flip
        )
        j 1 - j!
    )
    
    `After:` /N
    D
    `Total flips: ` k . /N
;

// Visualization helper
:Z                      // Z for viZualize
    [ 5 3 1 4 2 ] a!
    `Pancake Sort Visualization` /N
    `Initial:` /N
    D
    
    n 1 - j!
    /U (
        j 0 > /W
        0 j M m!
        m j = /F = (
            m 0 > (
                `Flip [0,` m . `]:` /N
                0 m F
                D
            )
            `Flip [0,` j . `]:` /N
            0 j F
            D
        )
        j 1 - j!
    )
    
    `Final:` /N
    D
;

