// stooge-sort 1
// https://en.wikipedia.org/wiki/Stooge_sort
// Initialize variables
0 n! 0 i! 0 j! 0 k! 0 t! 0 l! 0 r!

// Helper function to swap elements
:W                      // W for sWap
    a i ? t!           // temp = a[i]
    a j ? a i ?!       // a[i] = a[j]
    t a j ?!           // a[j] = temp
;

// Main stooge sort recursive function
:R                      // R for Recursive sort
    r!                 // right bound 
    l!                 // left bound
    
    // If first element is larger, swap
    a l ? a r ? > (    // if a[left] > a[right]
        l i! r j!     // prepare indices
        W             // swap elements
    )
    
    // If range is large enough, recurse
    r l - 2 > (       // if range > 2
        // Calculate thirds
        r l - 1 + 3 / k!  // k = size/3
        
        // Sort first two-thirds
        l r k - R
        
        // Sort last two-thirds
        l k + r R
        
        // Sort first two-thirds again
        l r k - R
    )
;

// Main entry point
:S                      // S for Sort
    a /S n!            // get array size
    n 1 < (            // if size < 1
        `Array too small` /N
        /T             // exit
    )
    0 n 1 - R         // sort entire array
;

// Print array helper
:D                      // D for Display
    `Array:` /N
    a /S (             // loop array size times
        a /i ? .       // print number
        ` `           // space
    ) /N
;

// Verify sort helper
:V                      // V for Verify
    `Verifying sort...` /N
    a /S 1 - (         // loop through array
        /i i!          // current position
        i 1 + j!       // next position
        a i ? a j ? > ( // if out of order
            `Sort failed at position ` i . /N
            /T         // exit
        ) ' '
    )
    `Sort verified successfully` /N
;

// Test function with multiple cases
:T                      // T for Test
    // Test 1: Basic array
    [ 5 4 3 2 1 ] a!
    `Test 1 - Basic sort` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N

    // Test 2: Already sorted
    [ 1 2 3 4 5 ] a!
    `Test 2 - Already sorted` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N

    // Test 3: With duplicates
    [ 4 2 4 2 1 ] a!
    `Test 3 - With duplicates` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N

    // Test 4: Small array
    [ 3 1 2 ] a!
    `Test 4 - Small array` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N
;

// Visualization with recursion tracking
:Z                      // Z for viZualize
    [ 4 2 3 1 ] a!
    `Stooge Sort Visualization` /N
    `Initial array:` /N
    D
    
    // Modified recursive function with visualization
    :Y                  // Y for visualize recursion
        r!             // right bound
        l!             // left bound
        `Sorting range [` l . `,` r . `]:` /N
        D
        
        a l ? a r ? > (
            `Swapping ` a l ? . ` and ` a r ? . /N
            l i! r j!
            W
            D
        )
        
        r l - 2 > (
            r l - 1 + 3 / k!
            `Recursing on first two-thirds` /N
            l r k - Y
            `Recursing on last two-thirds` /N
            l k + r Y
            `Recursing on first two-thirds again` /N
            l r k - Y
        )
    ;
    
    0 n 1 - Y         // Run visualization
    
    `Final array:` /N
    D
;

// Performance counter
:P                      // P for Performance
    0 k!               // initialize recursion counter
    [ 5 4 3 2 1 ] a!
    `Performance Analysis` /N
    `Initial array:` /N
    D
    
    // Modified recursive function with counting
    :C                  // C for Count recursion
        r!             // right bound
        l!             // left bound
        k 1 + k!       // increment recursion counter
        
        a l ? a r ? > (
            l i! r j!
            W
        )
        
        r l - 2 > (
            r l - 1 + 3 / t!
            l r t - C
            l t + r C
            l r t - C
        )
    ;
    
    0 n 1 - C         // Run with counting
    
    `Final array:` /N
    D
    `Total recursive calls: ` k . /N
;

// Educational explanation
:E                      // E for Educate
    `Stooge Sort Explanation` /N
    `----------------------` /N
    `Stooge Sort is a recursive sorting algorithm that:` /N
    `1. If the first element is larger than last, swap them` /N
    `2. If there are 3 or more elements:` /N
    `   - Recursively sort first 2/3 of elements` /N
    `   - Recursively sort last 2/3 of elements` /N
    `   - Recursively sort first 2/3 of elements again` /N
    `Time complexity: O(n^(log 3/log 1.5)) â‰ˆ O(n^2.709)` /N
    /N
    `Demonstration with small array:` /N
    [ 3 1 4 2 ] a!
    D
    S
    D
;
