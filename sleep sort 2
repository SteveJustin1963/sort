// https://rosettacode.org/wiki/Sorting_algorithms/Sleep_sort#FreeBASIC
// Sandman 
// Initialize variables
0 n! 0 i! 0 j! 0 t! 0 s! 0 c!

// Simulate delay/sleep
:D                      // D for Delay
    i!                 // input value
    i 50 * s!         // scale for delay simulation
    s (               // simulate delay
        j 1 + j!      // increment counter
    )
;

// Process single element (simulated thread)
:T                      // T for Thread
    t!                 // thread id
    i!                 // value to process
    
    `Thread ` t . ` sleeping for value ` i . /N
    i D               // simulate sleep
    i b c ?!          // store in output
    c 1 + c!          // increment completion counter
    `Thread ` t . ` completed` /N
;

// Main sandman sort
:S                      // S for Sort
    a /S n!            // get array size
    n 1 < (            // if size < 1
        `Array too small` /N
        /T             // exit
    )
    
    // Initialize output array
    [ 0 0 0 0 0 0 0 0 0 0 ] b!
    0 c!              // reset completion counter
    
    // Process each element
    `Starting Sandman sort...` /N
    n (               // for each element
        /i j!         // get index
        a j ? i!      // get value
        j t!          // thread id
        i t T        // process value
    )
    
    // Copy back to original array
    n (              // for each position
        /i j!        // get index
        b j ? a j ?! // copy back
    )
;

// Print array
:P                      // P for Print
    `Array:` /N
    a /S (             // for each element
        a /i ? .       // print value
        ` `           // space
    ) /N
;

// Verify sort
:V                      // V for Verify
    `Verifying sort...` /N
    a /S 1 - (         // check each pair
        /i i!          // current index
        i 1 + j!       // next index
        a i ? a j ? > ( // if out of order
            `Sort failed at position ` i . /N
            /T         // exit
        ) ' '
    )
    `Sort verified successfully` /N
;

// Random array generator
:R                      // R for Random
    n!                 // size of array
    [ 0 0 0 0 0 0 0 0 0 0 ] a! // initialize array
    n (               // for each position
        /i i!         // get index
        i 1 + a i ?!  // store value (simple sequence for demo)
    )
;

// Visual demonstration
:Z                      // Z for viZualize
    [ 4 2 5 1 3 ] a!
    `Sandman Sort Visualization` /N
    `Initial array:` /N
    P
    
    // Simulate threads with visual feedback
    [ 0 0 0 0 0 ] b!  // output array
    0 c!              // reset counter
    
    n (              // for each element
        /i j!        // get index
        a j ? i!     // get value
        j t!         // thread id
        
        // Visual thread simulation
        `Thread ` t . ` starting for value ` i . /N
        `Sleeping...` /N
        i D          // simulate delay
        i b c ?!     // store result
        c 1 + c!     // increment counter
        
        `Current state:` /N
        b /S (       // show current output
            b /i ? " 0 > ( // if value present
                b /i ? .  // print it
                ` `
            ) '
        ) /N
    )
    
    `Final array:` /N
    P
;

// Main test function
:M                      // M for Main
    // Generate test array
    5 R               // create array size 5
    `Original array:` /N
    P
    
    // Sort and verify
    S
    `Sorted array:` /N
    P
    V
;

// Educational demonstration
:E                      // E for Educate
    `Sandman (Sleep) Sort Explanation` /N
    `----------------------------` /N
    `This is a novelty sorting algorithm that:` /N
    `1. Creates a "thread" for each number` /N
    `2. Each thread sleeps proportional to its value` /N
    `3. Upon waking, numbers are output in sequence` /N
    `4. The result is naturally sorted by wake time` /N
    /N
    `Limitations:` /N
    `- Not practical for real use` /N
    `- Requires parallel processing` /N
    `- Time complexity depends on max value` /N
    `- This is a simulation as MINT lacks threads` /N
    
    `Demonstration with small array:` /N
    [ 3 1 4 2 ] a!
    P
    S
    P
;

// Test suite
:T                      // T for Test
    // Test 1: Basic array
    [ 5 3 1 4 2 ] a!
    `Test 1 - Basic array` /N
    `Before:` /N
    P
    S
    `After:` /N
    P
    V /N

    // Test 2: Already sorted
    [ 1 2 3 4 5 ] a!
    `Test 2 - Already sorted` /N
    `Before:` /N
    P
    S
    `After:` /N
    P
    V /N

    // Test 3: Reversed
    [ 5 4 3 2 1 ] a!
    `Test 3 - Reversed` /N
    `Before:` /N
    P
    S
    `After:` /N
    P
    V /N
;
