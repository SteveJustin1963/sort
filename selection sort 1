// selection sort 1 
// https://en.wikipedia.org/wiki/Selection_sort
// Initialize variables
0 n! 0 i! 0 j! 0 k! 0 t! 0 m!

// Helper function to swap elements
:W                      // W for sWap
    a i ? t!           // temp = a[i]
    a j ? a i ?!       // a[i] = a[j]
    t a j ?!           // a[j] = temp
;

// Main selection sort implementation
:S                      // S for Selection sort
    a /S n!            // get array size
    n 1 < (            // if size < 1
        `Array too small` /N
        /T             // exit
    )
    
    n 1 - (           // for each position
        /i i!         // current position
        i m!          // min_idx = i
        
        // Find minimum in unsorted portion
        i 1 + k!      // start from i+1
        n (           // until end
            /i j!     // j = current index
            a j ? a m ? < ( // if current < min
                j m!      // update min_idx
            ) '
        )
        
        // Swap if needed
        i m = /F = (  // if min_idx != i
            i " j!    // save i
            m i!      // i = min_idx
            W        // swap
            j i!     // restore i
        )
    )
;

// Print array helper
:D                      // D for Display
    `Array:` /N
    a /S (             // loop array size times
        a /i ? .       // print number
        ` `           // space
    ) /N
;

// Verify sort helper
:V                      // V for Verify
    `Verifying sort...` /N
    a /S 1 - (         // loop through array
        /i i!          // current position
        i 1 + j!       // next position
        a i ? a j ? > ( // if out of order
            `Sort failed at position ` i . /N
            /T         // exit
        ) ' '
    )
    `Sort verified successfully` /N
;

// Test function with multiple cases
:T                      // T for Test
    // Test 1: Basic array
    [ 5 4 3 2 1 ] a!
    `Test 1 - Basic sort` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N

    // Test 2: Already sorted
    [ 1 2 3 4 5 ] a!
    `Test 2 - Already sorted` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N

    // Test 3: Reversed
    [ 9 8 7 6 5 4 3 2 1 ] a!
    `Test 3 - Reversed array` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N

    // Test 4: With duplicates
    [ 4 2 3 2 1 4 3 2 1 ] a!
    `Test 4 - With duplicates` /N
    `Before:` /N
    D
    S
    `After:` /N
    D
    V /N
;

// Visualization helper
:Z                      // Z for viZualize
    [ 5 3 1 4 2 ] a!
    `Selection Sort Visualization` /N
    `Initial array:` /N
    D
    
    n 1 - (           // for each position
        /i i!
        i m!
        `Current position: ` i . /N
        `Finding minimum from position ` i . ` onwards` /N
        
        i 1 + k!
        n (
            /i j!
            a j ? a m ? < (
                j m!
                `New minimum found at position ` m . /N
            ) '
            D
        )
        
        i m = /F = (
            i " j!
            m i!
            W
            j i!
            `Swapped elements` /N
        )
        D
        /N
    )
    
    `Final array:` /N
    D
;

// Performance counter
:P                      // P for Performance
    0 k!               // initialize swap counter
    [ 5 4 3 2 1 ] a!
    `Performance Test` /N
    `Before:` /N
    D
    
    n 1 - (
        /i i!
        i m!
        
        i 1 + t!
        n (
            /i j!
            a j ? a m ? < (
                j m!
            ) '
        )
        
        i m = /F = (
            i " j!
            m i!
            W
            j i!
            k 1 + k!   // count swap
        )
    )
    
    `After:` /N
    D
    `Total swaps: ` k . /N
;

// Optimized version for small arrays
:O                      // O for Optimized
    a /S n!
    n 10 < (           // if small array
        S              // use regular selection sort
    ) /E (             // else
        // Use binary search to find position
        n 1 - (
            /i i!
            i m!
            i 1 + k!
            n (
                /i j!
                a j ? a m ? < (
                    j m!
                ) '
            )
            i m = /F = (
                i " j!
                m i!
                W
                j i!
            )
        )
    )
;
